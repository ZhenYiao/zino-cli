{{#if is_actix}}
use crate::controller::hello;
use actix_web::web::{get, ServiceConfig};
use zino::RouterConfigure;
{{/if}}
{{#if is_ntex}}
use crate::controller::hello;
use ntex::web::{get, ServiceConfig};
use zino::RouterConfigure;
{{/if}}
{{#if is_axum}}
use crate::controller::hello;
use axum::{
    routing::get,
    Router,
};
{{/if}}
{{#if is_dioxus_project}}
use crate::view::overview::Overview;
use dioxus::prelude::*;
use dioxus_router::prelude::*;
{{/if}}
{{#if is_actix}}
pub fn routes() -&gt; Vec&lt;RouterConfigure&gt; {
    vec![
        basic_router as RouterConfigure,
    ]
}
fn basic_router(cfg: &mut ServiceConfig) {
    cfg.route("/", get().to(hello::index));
}
{{/if}}
{{#if is_ntex}}
pub fn routes() -&gt; Vec&lt;RouterConfigure&gt; {
    vec![
        basic_router as RouterConfigure,
    ]
}
fn basic_router(cfg: &mut ServiceConfig) {
    cfg.route("/", get().to(hello::index));
}
{{/if}}
{{#if is_axum}}
pub fn routes() -&gt; Vec&lt;Router&gt; {
    let mut routes = Vec::new();
    let router = Router::new()
        .route("/", get(hello::index));
    routes.push(router);
    routes
}
{{/if}}

{{#if is_dioxus_project}}
#[derive(Clone, PartialEq, Eq, Routable)]
#[rustfmt::skip]
pub enum Route {
    #[route("/")]
    Overview {},
    #[end_layout]
    #[route("/:..segments")]
    PageNotFound { segments: Vec&lt;String&gt; },
}

impl Default for Route {
    fn default() -&gt; Self {
        Self::Overview {}
    }
}

#[component]
fn PageNotFound(segments: Vec&lt;String&gt;) -&gt; Element {
    let path = segments.join("/");
    rsx! {
        div {
        class: "notification is-danger is-light",
            h3 { "Page not found" }
            p { "The page `{path}` you requested doesn't exist." }
        }
    }
}

{{/if}}